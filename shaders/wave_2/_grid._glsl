const int WEIGHT_RADIUS = 11;

vec4 init() {
    float x = rand_rand();
    return vec4(x, x, x, 1.0);
}

vec4 grow() {
    vec4 lval = texelFetch(buffGrid, ivec2(gl_FragCoord.xy), 0);
    vec4 val = lval * (1.0 - rand_range(0.1, 0.2) * timeDelta * 1.0);

    if (val.x > rand_range(0.1, 0.35)) {
        return vec4(val.xyz, 1.0);
    }

    float n = 0.0;

    for (int i = -SEARCH_RADIUS; i <= SEARCH_RADIUS; i++) {
        for (int j = -SEARCH_RADIUS; j <= SEARCH_RADIUS; j++) {
            vec4 lval2 = texelFetch(buffGrid, ivec2(gl_FragCoord.xy) + ivec2(i, j), 0);

            if (lval2.x >= rand_range(0.4, 0.6)) {
                float nx = float(i) / float(WEIGHT_RADIUS);
                float ny = float(j) / float(WEIGHT_RADIUS);
                float weight = 1.0 - (nx * nx + ny * ny);

                val += lval2 * weight;
                n += weight;
            }
        }
    }

    val = val / n;
    val = clamp(val, 0.0, 1.0);

    return vec4(val.xyz, 1.0);
}

vec4 render()
{
    if (time < 0.01) {
        return init();
    } else {
        return grow();
    }
}
